#!/bin/bash

# Original code by Wichert Akkerman <wichert@wiggy.net>
# Simple script to generate a debian/ directory for a Linux kernel.

set -euo pipefail

# Function to check if an option is enabled in the configuration
is_enabled() {
    grep -q "^$1=y" include/config/auto.conf
}

# Function to echo a value depending on the configuration
if_enabled_echo() {
    if is_enabled "$1"; then
        echo -n "$2"
    elif [ $# -ge 3 ]; then
        echo -n "$3"
    fi
}

# Function to set the Debian architecture
set_debarch() {
    if [ "${KBUILD_DEBARCH:+set}" ]; then
        debarch="$KBUILD_DEBARCH"
        return
    fi

    # Determine the Debian architecture from the machine architecture
    case "$UTS_MACHINE" in
        i386|alpha|m68k|riscv*)
            debarch="$UTS_MACHINE"
            ;;
        x86_64)
            debarch=amd64
            ;;
        sparc*)
            debarch=sparc$(if_enabled_echo CONFIG_64BIT 64)
            ;;
        s390*)
            debarch=s390x
            ;;
        ppc*)
            if is_enabled CONFIG_64BIT; then
                debarch=ppc64$(if_enabled_echo CONFIG_CPU_LITTLE_ENDIAN el)
            else
                debarch=powerpc$(if_enabled_echo CONFIG_SPE spe)
            fi
            ;;
        parisc*)
            debarch=hppa
            ;;
        mips*)
            if is_enabled CONFIG_CPU_LITTLE_ENDIAN; then
                debarch=mips$(if_enabled_echo CONFIG_64BIT 64)$(if_enabled_echo CONFIG_CPU_MIPSR6 r6)el
            elif is_enabled CONFIG_CPU_MIPSR6; then
                debarch=mips$(if_enabled_echo CONFIG_64BIT 64)r6
            else
                debarch=mips
            fi
            ;;
        aarch64|arm64)
            debarch=arm64
            ;;
        arm*)
            if is_enabled CONFIG_AEABI; then
                debarch=arm$(if_enabled_echo CONFIG_VFP hf el)
            else
                debarch=arm
            fi
            ;;
        openrisc)
            debarch=or1k
            ;;
        sh)
            if is_enabled CONFIG_CPU_SH3; then
                debarch=sh3$(if_enabled_echo CONFIG_CPU_BIG_ENDIAN eb)
            elif is_enabled CONFIG_CPU_SH4; then
                debarch=sh4$(if_enabled_echo CONFIG_CPU_BIG_ENDIAN eb)
            fi
            ;;
        um)
            debarch=$(if is_enabled CONFIG_64BIT; then echo amd64; else echo i386; fi)
            ;;
        *)
            debarch=$(dpkg-architecture -qDEB_HOST_ARCH)
            echo "" >&2
            echo "** ** **  WARNING  ** ** **" >&2
            echo "Architecture $UTS_MACHINE not recognized, using host architecture ($debarch)." >&2
            echo "" >&2
            ;;
    esac
}

# Create debian/source/ if it is a source package build
gen_source() {
    mkdir -p debian/source
    echo "3.0 (quilt)" > debian/source/format
    echo "diff-ignore" > debian/source/local-options
    echo "extend-diff-ignore = .*" >> debian/source/local-options

    mkdir -p debian/patches
    {
        echo "Subject: Add .config"
        echo "Author: ${maintainer}"
        echo
        echo "--- /dev/null"
        echo "+++ linux/.config"
        diff -u /dev/null "${KCONFIG_CONFIG}" | tail -n +3
    } > debian/patches/config.patch
    echo config.patch > debian/patches/series

    "${srctree}/scripts/package/gen-diff-patch" debian/patches/diff.patch
    if [ -s debian/patches/diff.patch ]; then
        sed -i "1iSubject: Add local diff\n1iAuthor: ${maintainer}\n" debian/patches/diff.patch
        echo diff.patch >> debian/patches/series
    else
        rm -f debian/patches/diff.patch
    fi
}

# Remove the existing debian directory and create a new one
rm -rf debian
mkdir debian

# Get user and maintainer information
user=${KBUILD_BUILD_USER:-$(id -nu)}
name=${DEBFULLNAME:-${user}}
email=${DEBEMAIL:-${user}@$(hostname -f 2>/dev/null || hostname)}

maintainer="${name} <${email}>"

# Handle script arguments
while [ $# -gt 0 ]; do
    case "$1" in
        --need-source)
            gen_source
            shift
            ;;
        *)
            break
            ;;
    esac
done

# Set the version and package name
version=$KERNELRELEASE
packageversion=${KDEB_PKGVERSION:-$(scripts/setlocalversion --no-local ${srctree})-$(scripts/build-version)}
sourcename=${KDEB_SOURCENAME:-linux-upstream}
packagename=$([ "$ARCH" = "um" ] && echo "user-mode-linux" || echo "linux-image")

# Set the Debian architecture
debarch=""
set_debarch

# Determine the distribution
distribution=${KDEB_CHANGELOG_DIST:-$(lsb_release -cs 2>/dev/null || echo "unstable")}

# Create changelog and control files
echo $debarch > debian/arch
cat <<EOF > debian/changelog
$sourcename ($packageversion) $distribution; urgency=low

  * Custom built Linux kernel.

 -- $maintainer  $(date -R)
EOF

cat <<EOF > debian/control
Source: $sourcename
Section: kernel
Priority: optional
Maintainer: $maintainer
Rules-Requires-Root: no
Build-Depends: debhelper-compat (= 12)
Build-Depends-Arch: bc, bison, cpio, flex, gcc-${host_gnu}, kmod, libelf-dev:native, libssl-dev:native, python3:native, rsync
Homepage: https://www.kernel.org/

Package: $packagename-$version
Architecture: $debarch
Description: Linux kernel, version $version
EOF

# Create additional packages if necessary
if [ "${SRCARCH}" != "um" ]; then
    cat <<EOF >> debian/control
Package: linux-libc-dev
Section: devel
Provides: linux-kernel-headers
Architecture: $debarch
Description: Linux support headers for userspace development
Multi-Arch: same
EOF
fi

# Create the debian/rules.vars file
cat <<EOF > debian/rules.vars
ARCH := ${ARCH}
KERNELRELEASE := ${KERNELRELEASE}
EOF

# Copy necessary files
cp "${srctree}/scripts/package/debian/copyright" debian/
cp "${srctree}/scripts/package/debian/rules" debian/

exit 0
